local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = Players.LocalPlayer

local aimlockEnabled = false
local currentTarget = nil

-- Prüft, ob ein Spieler als Ziel in Frage kommt (nicht du, lebt, und nicht im gleichen Team)
local function isEligible(player)
    if player == localPlayer then return false end
    if not player.Character then return false end
    local humanoid = player.Character:FindFirstChild("Humanoid")
    local head = player.Character:FindFirstChild("Head")
    if not humanoid or not head then return false end
    if humanoid.Health < 1 then return false end
    if localPlayer.Team and player.Team and localPlayer.Team == player.Team then
        return false
    end
    return true
end

-- Liefert den nächstgelegenen eligible Gegner (Sortierung anhand der Head-Position)
local function getNearestTarget()
    local nearest = nil
    local shortestDistance = math.huge
    if localPlayer.Character and localPlayer.Character:FindFirstChild("Head") then
        local myHeadPos = localPlayer.Character.Head.Position
        for _, player in ipairs(Players:GetPlayers()) do
            if isEligible(player) then
                local head = player.Character.Head
                local distance = (myHeadPos - head.Position).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearest = player
                end
            end
        end
    end
    return nearest
end

-- Mit Maustaste 4 (MouseButton4) zum nächsten eligible Ziel wechseln
local function cycleTarget()
    local targets = {}
    if localPlayer.Character and localPlayer.Character:FindFirstChild("Head") then
        local myHeadPos = localPlayer.Character.Head.Position
        for _, player in ipairs(Players:GetPlayers()) do
            if isEligible(player) then
                local head = player.Character.Head
                local distance = (myHeadPos - head.Position).Magnitude
                table.insert(targets, {player = player, distance = distance})
            end
        end
        table.sort(targets, function(a, b) return a.distance < b.distance end)
    end

    if #targets == 0 then
        currentTarget = nil
        return
    end

    if not currentTarget then
        currentTarget = targets[1].player
    else
        local currentIndex = nil
        for i, t in ipairs(targets) do
            if t.player == currentTarget then
                currentIndex = i
                break
            end
        end
        if currentIndex then
            local nextIndex = currentIndex + 1
            if nextIndex > #targets then
                nextIndex = 1
            end
            currentTarget = targets[nextIndex].player
        else
            currentTarget = targets[1].player
        end
    end
end

-- Eingabeverarbeitung: Q toggelt den Aimlock, MouseButton4 wechselt das Ziel
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Q then
        aimlockEnabled = not aimlockEnabled
        if aimlockEnabled then
            currentTarget = getNearestTarget()
            print("Aimlock aktiviert. Ziel:", currentTarget and currentTarget.Name or "kein Ziel")
        else
            currentTarget = nil
            print("Aimlock deaktiviert.")
        end
    elseif input.KeyCode == Enum.KeyCode.MouseButton4 then
        if aimlockEnabled then
            cycleTarget()
            print("Ziel gewechselt. Neues Ziel:", currentTarget and currentTarget.Name or "kein Ziel")
        end
    end
end)

-- Überprüft kontinuierlich, ob das aktuelle Ziel noch gültig ist und aktualisiert es gegebenenfalls
RunService.RenderStepped:Connect(function()
    if aimlockEnabled then
        if not currentTarget or not isEligible(currentTarget) then
            currentTarget = getNearestTarget()
        end
    end
end)

-- Wird aufgerufen, wenn die Waffe abgefeuert wird – teleportiert den Schuss an den Kopf des gelockten Gegners
local function onGunFired()
    if aimlockEnabled and currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild("Head") then
        local targetHead = currentTarget.Character.Head
        local targetPosition = targetHead.Position
        
        -- Hier teleportieren wir den Schuss: Statt eines normalen Projektils wird ein RemoteEvent ausgelöst,
        -- das den Schaden (Headshot) direkt am Kopf des Gegners anwendet.
        if ReplicatedStorage:FindFirstChild("BulletHit") then
            ReplicatedStorage.BulletHit:FireServer(currentTarget, targetPosition, "headshot")
            print("Schuss teleportiert zu", currentTarget.Name, "für einen Headshot!")
        else
            print("BulletHit RemoteEvent nicht gefunden!")
        end
    else
        print("Aimlock nicht aktiv oder kein gültiges Ziel.")
    end
end

-- Setze den Gun-Tool-Handler für alle Tools im Charakter (Waffe)
local function setupGunTool(tool)
    tool.Activated:Connect(onGunFired)
end

if localPlayer.Character then
    for _, child in ipairs(localPlayer.Character:GetChildren()) do
        if child:IsA("Tool") then
            setupGunTool(child)
        end
    end
    localPlayer.Character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") then
            setupGunTool(child)
        end
    end)
end
